'''
==============================================================================================
@ Title: 용액
@ URL: https://www.acmicpc.net/problem/2467
@ Author: jopemachine
@ Created Date: 10/11/2022, 2:50:02 PM
@ Description:
KOI 부설 과학연구소에서는 많은 종류의 산성 용액과 알칼리성 용액을 보유하고 있다. 각 용액에는 그 용액의 특성을 나타내는 하나의
정수가 주어져있다. 산성 용액의 특성값은 1부터 1,000,000,000까지의 양의 정수로 나타내고, 알칼리성 용액의 특성값은 -1부터
-1,000,000,000까지의 음의 정수로 나타낸다. 같은 양의 두 용액을 혼합한 용액의 특성값은 혼합에 사용된 각 용액의 특성값의
합으로 정의한다. 이 연구소에서는 같은 양의 두 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들려고 한다.  예를 들어, 주어진
용액들의 특성값이 [-99, -2, -1, 4, 98]인 경우에는 특성값이 -99인 용액과 특성값이 98인 용액을 혼합하면 특성값이
-1인 용액을 만들 수 있고, 이 용액의 특성값이 0에 가장 가까운 용액이다. 참고로, 두 종류의 알칼리성 용액만으로나 혹은 두 종류의
산성 용액만으로 특성값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다. 산성 용액과 알칼리성 용액의 특성값이 정렬된
순서로 주어졌을 때, 이 중 두 개의 서로 다른 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을
작성하시오.
@ Input: 첫째 줄에는 전체 용액의 수 N이 입력된다. N은 2 이상 100,000 이하의 정수이다. 둘째 줄에는 용액의 특성값을 나타내는 N개의
정수가 빈칸을 사이에 두고 오름차순으로 입력되며, 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다.
N개의 용액들의 특성값은 모두 서로 다르고, 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.
@ Output: 첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성값을 출력한다. 출력해야 하는 두 용액은 특성값의 오름차순으로
출력한다. 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.
@ Desc:
절댓값의 합을 최소화하기 위해 abs_sum을 최소화 하는 투 포인터 알고리즘으로 풀었는데, 이렇게 풀면 풀이가 복잡해진다.
이 문제의 경우 절댓값의 합을 최소화 하기 위해, sum만 보고 판단할 수 있어서 훨씬 쉽게 풀 수 있는 방법이 있다. (2470)
==============================================================================================
'''
from math import inf

N = int(input())
arr = list(map(int, input().split()))

i = 0
j = N - 1
min_abs_sum = inf
res = (0, 0)

while True:
  abs_sum = abs(arr[i] + arr[j])

  if min_abs_sum > abs_sum:
    min_abs_sum = abs_sum
    res = (arr[i], arr[j])

  if j - i <= 1:
    break

  # i가 증가하면 abs(sum)이 증가, j가 감소하면 abs(sum)이 감소
  if (arr[i + 1] > 0 and arr[j] > 0) or (arr[i] > 0 and arr[j - 1] > 0):
    if abs_sum > 0:
      j -= 1
    else:
      i += 1

  # 경계
  elif (arr[i + 1] < 0 and arr[j] > 0) or (arr[i] < 0 and arr[j - 1] > 0):
    # i를 증가시켰을 때의 절댓값 합이 j를 감소시켰을 때의 절댓값 합보다 큰 경우, j를 감소
    if abs(arr[i + 1] + arr[j]) > abs(arr[i] + arr[j - 1]):
      j -= 1
    else:
      i += 1

  # i가 증가하면 abs(sum)이 감소, j가 감소하면 abs(sum)이 증가
  elif (arr[i + 1] < 0 and arr[j] < 0) or (arr[i] < 0 and arr[j - 1] < 0):
    if abs_sum > 0:
      i += 1
    else:
      j -= 1

print(f"{res[0]} {res[1]}")